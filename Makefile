#!/usr/bin/make -f

# Filename:		Makefile
# Date:			4/13/2020
# Author:		Bradley Wersterfer
# Email:		bmw170030@utdallas.edu
# Course       		CS 3377.502 Spring 2020
# Version:		1.0
# Copyright:		2020, All Rights Reserved
#
# Description:
#
#       This Makefile assists in compiling the
#       fifth homework assignment for CS3377. It
#       accomplishes this by first using TCLAP and
#       rudeconfig to parse parameters for operation,
#       after which it uses inotify to assist with
#       monitoring a directory for file changes as
#       a daemon. Various variables are defined for
#       implicit rules to use the third party packages
#       for this program; additionally, the -Wall
#       flag is included to warn against any errors.
#
#       Because access to some folders is limited,
#       the majority of these programs are stored
#       in ~/include, ~/lib, etc. Individual cases
#       can be seen below.
#
#       There is also a special "make decrypt" rule
#       included below. This will create an extra
#       cs3377decrypt program that will accept
#       a password, encrypted input file, and an
#       output file. Using the password and AES
#       encryption, the decrypted output is stored
#       in the output file. Otherwise, it is also
#       generated by the normal make all call.

# ===============================================

# Sets variables for the implicit C++ rule: 
# n.o: n.cc, n.cpp, or n.c
# 	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c
# Uses the C compiler for Lex.
CXX =  g++
CXXFLAGS = -Wall
CPPFLAGS = -I ~/include/
LDFLAGS = -static -L /home/012/b/bm/bmw170030/lib/
LDLIBS = -lrudeconfig -lcryptopp

# ===============================================

# Sets variables unique to this project, such as
# executable name and source files.
PROJECTNAME = cs3377hw5
EXEC = cs3377dirmond
SRCS = hw5.cc parseCmdLine.cc parseConfig.cc signaller.cc logger.cc inotify.cc
OBJS = $(SRCS:.cc=.o)

# ===============================================

# Sets phony targets for all and clean.
.PHONY: all clean
all: $(EXEC) decrypt
clean:
	rm -f $(OBJS) *.d *~ \#* $(EXEC) cs3377decrypt

# Contains a special rule for creating the accompanying cs3377decrypt program.
decrypt: decrypt.cc
	g++ -o cs3377decrypt -I ~/include/ decrypt.cc -static -L /home/012/b/bm/bmw170030/lib -lcryptopp

# Creates the executable file from the list of required .o files. 
$(EXEC): $(OBJS)
	$(CXX) -o $@ $(OBJS) $(LDFLAGS) $(LDLIBS)

# Develops the pattern for .d files.
%.d:%.cc
	@echo Updating $@ Dependency File
	@set -e; rm -f $@; $(CXX) -MM $(CPPFLAGS) $< > $@.$$$$; sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; rm -f $@.$$$$

Makefile: $(SRCS:.cc=.d)

# Backup Target
backup: clean
	@mkdir -p ~/backups; chmod 700 ~/backups
	@$(eval CURDIRNAME := $(shell basename `pwd`))
	@$(eval MKBKUPNAME := ~/backups/$(PROJECTNAME)-$(shell date +'%Y.%m.%d-%H:%M:%S').tar.gz)
	@echo
	@echo Writing Backup File to: $(MKBKUPNAME)
	@echo
	@-tar zcfv $(MKBKUPNAME) ../$(CURDIRNAME)
	@chmod 600 $(MKBKUPNAME)
	@echo
	@echo Done.

# Includes the dependency files created by the preprocessor.
-include $(SRS:.cc=.d)
